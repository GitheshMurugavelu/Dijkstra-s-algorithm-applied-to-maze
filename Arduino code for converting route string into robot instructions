String code = "abdfejkl";
int direction = 2;
int targetdirection = 0;
int LetterNumber = 1;
int Xdiff = 0;
int Ydiff = 0;
struct Coords {
  int x;
  int y;
};
struct Pointmap {
  char letter;
  Coords coords;
};
Pointmap points[] = {
  { 'a', {1, 1} },
  { 'b', {1, 2} },
  { 'c', {2, 1} },
  { 'd', {2, 2} },
  { 'e', {1, 3} },
  { 'f', {2, 3} },
  { 'g', {3, 3} },
  { 'h', {3, 2} },
  { 'i', {3, 1} },
  { 'j', {1, 4} },
  { 'k', {2, 0} },
  { 'l', {3, 4} },
  { 'm', {4, 4} },
  { 'n', {4, 3} },
  { 'o', {4, 2} },
  { 'p', {4, 1} }
};
void LeftTurn(){
  direction = direction-1;
  if(direction == -1){
    direction = 3;
  }
}


void RightTurn(){
  direction = direction+1;
  if(direction == 4){
    direction = 0;
  }
}
Coords getCoordsByLetter(char letter) {
  for (int i = 0; i < sizeof(points) / sizeof(points[0]); i++) {
    if (points[i].letter == letter) {
      return points[i].coords;
    }
  }
  // Return an invalid coordinate if not found
  return { -1, -1 };
}


void directcalc(){
if(LetterNumber < code.length()){
  char one = code.charAt(LetterNumber);
  Coords PointOne = getCoordsByLetter(one);
  Serial.println(PointOne.x);
  char two = code.charAt(LetterNumber + 1);
  Coords PointTwo = getCoordsByLetter(two);
  Serial.println(PointTwo.x);
    Xdiff = PointOne.x - PointTwo.x + 1;
    Ydiff = PointOne.y - PointTwo.y + 1;
   LetterNumber = LetterNumber + 1;
   }
}
void MovementCalc(){
  if(Xdiff == 0){
   targetdirection = 1;
  } else if(Xdiff == 2){
    targetdirection = 3;
  } else if(Ydiff == 1){
    targetdirection = 0;
  } else if(Ydiff == 3){
    targetdirection = 2;
  }
}


void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
}


void loop() {
directcalc();
MovementCalc();
int leftTurns = (direction - targetdirection + 4) % 4;
int rightTurns = (targetdirection - direction + 4) % 4;
if(leftTurns <= rightTurns){
  for (; leftTurns > 0 ;){
    LeftTurn();
    Serial.print("Turned Left");
    leftTurns = leftTurns -1;
  } }
  else {
    for(; rightTurns > 0;)
    RightTurn();
    Serial.print("Turned Right");
    rightTurns = rightTurns -1;
  }
}
